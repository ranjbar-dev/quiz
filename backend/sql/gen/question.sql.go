// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: question.sql

package sql_gen

import (
	"context"
)

const getQuestions = `-- name: GetQuestions :many
SELECT id, exam_id, question, score, first_option, second_option, third_option, fourth_option, answer, created_at FROM questions WHERE id = ANY($1::int[])
`

func (q *Queries) GetQuestions(ctx context.Context, dollar_1 []int32) ([]Question, error) {
	rows, err := q.db.Query(ctx, getQuestions, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.ExamID,
			&i.Question,
			&i.Score,
			&i.FirstOption,
			&i.SecondOption,
			&i.ThirdOption,
			&i.FourthOption,
			&i.Answer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
