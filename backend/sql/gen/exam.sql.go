// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: exam.sql

package sql_gen

import (
	"context"
)

const findExam = `-- name: FindExam :one
SELECT id, job_id, name, description, total_score, pass_score, duration, is_active, password, allowed_ips, created_at FROM exams WHERE id = $1
`

func (q *Queries) FindExam(ctx context.Context, id int32) (Exam, error) {
	row := q.db.QueryRow(ctx, findExam, id)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Name,
		&i.Description,
		&i.TotalScore,
		&i.PassScore,
		&i.Duration,
		&i.IsActive,
		&i.Password,
		&i.AllowedIps,
		&i.CreatedAt,
	)
	return i, err
}

const findExamResults = `-- name: FindExamResults :many
SELECT id, user_id, exam_id, questions_ids, answers, status, score, started_at, finished_at, created_at FROM results WHERE exam_id = $1
`

func (q *Queries) FindExamResults(ctx context.Context, examID int32) ([]Result, error) {
	rows, err := q.db.Query(ctx, findExamResults, examID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ExamID,
			&i.QuestionsIds,
			&i.Answers,
			&i.Status,
			&i.Score,
			&i.StartedAt,
			&i.FinishedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvailableExams = `-- name: GetAvailableExams :many
SELECT id, job_id, name, description, total_score, pass_score, duration, is_active, password, allowed_ips, created_at FROM exams WHERE job_id != ANY($1::int[]) AND is_active = TRUE
`

func (q *Queries) GetAvailableExams(ctx context.Context, dollar_1 []int32) ([]Exam, error) {
	rows, err := q.db.Query(ctx, getAvailableExams, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exam
	for rows.Next() {
		var i Exam
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Name,
			&i.Description,
			&i.TotalScore,
			&i.PassScore,
			&i.Duration,
			&i.IsActive,
			&i.Password,
			&i.AllowedIps,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
