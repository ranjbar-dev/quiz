// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sql_gen

import (
	"context"
)

const findUser = `-- name: FindUser :one
SELECT id, first_name, last_name, national_code, father_name, gender, birth_date, birth_place, department, position, phone_number, work_phone, jobs, password, created_at FROM users WHERE id = $1
`

func (q *Queries) FindUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.NationalCode,
		&i.FatherName,
		&i.Gender,
		&i.BirthDate,
		&i.BirthPlace,
		&i.Department,
		&i.Position,
		&i.PhoneNumber,
		&i.WorkPhone,
		&i.Jobs,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET first_name = $2, last_name = $3, national_code = $4, father_name = $5, gender = $6, birth_date = $7, birth_place = $8, department = $9, position = $10, phone_number = $11, work_phone = $12 WHERE id = $1 RETURNING id, first_name, last_name, national_code, father_name, gender, birth_date, birth_place, department, position, phone_number, work_phone, jobs, password, created_at
`

type UpdateUserParams struct {
	ID           int32
	FirstName    string
	LastName     string
	NationalCode string
	FatherName   string
	Gender       int16
	BirthDate    string
	BirthPlace   string
	Department   string
	Position     string
	PhoneNumber  string
	WorkPhone    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.NationalCode,
		arg.FatherName,
		arg.Gender,
		arg.BirthDate,
		arg.BirthPlace,
		arg.Department,
		arg.Position,
		arg.PhoneNumber,
		arg.WorkPhone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.NationalCode,
		&i.FatherName,
		&i.Gender,
		&i.BirthDate,
		&i.BirthPlace,
		&i.Department,
		&i.Position,
		&i.PhoneNumber,
		&i.WorkPhone,
		&i.Jobs,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $2 WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int32
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}
